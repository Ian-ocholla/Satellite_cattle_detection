# -*- coding: utf-8 -*-
"""data_augmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g_Wmx-ZxdtE9O146mUSSpsllVMt_Vsdn
"""

import numpy as np
import imgaug.augmenters as iaa

#Define data augmentation functions: flip up and down; linear contrast; and rotate 90, 180, 270 degrees
seq_flipud = iaa.Sequential([
    iaa.Flipud(1),
])
seq_contrast = iaa.Sequential([
    # fixed value
    #iaa.LinearContrast(alpha=1.6, per_channel=True)
    # Range of alpha
    iaa.LinearContrast(alpha=(0.9, 1.1))
])
seq_fliplr = iaa.Sequential([
    iaa.Fliplr(1)
])
seq_rotate_90 = iaa.Sequential([
    iaa.Affine(rotate=90)
])
seq_rotate_180 = iaa.Sequential([
    iaa.Affine(rotate=180)
])
seq_rotate_270 = iaa.Sequential([
    iaa.Affine(rotate=270)
])
seq_brightness = iaa.Sequential([
    iaa.Multiply((0.8, 1.2))
])

#Define data augmentation function
def augment_data(Xtrain, Ytrain):


  Xtrain_fliplr = seq_fliplr(images=Xtrain)
  Ytrain_fliplr = seq_fliplr(images=Ytrain)
  Xtrain_flipud = seq_flipud(images=Xtrain)
  Ytrain_flipud = seq_flipud(images=Ytrain)
  Xtrain_rotate_90 = seq_rotate_90(images=Xtrain)
  Ytrain_rotate_90 = seq_rotate_90(images=Ytrain)
  Xtrain_rotate_180 = seq_rotate_180(images=Xtrain)
  Ytrain_rotate_180 = seq_rotate_180(images=Ytrain)
  Xtrain_rotate_270 = seq_rotate_270(images=Xtrain)
  Ytrain_rotate_270 = seq_rotate_270(images=Ytrain)
  Xtrain_brightness = seq_brightness(images=Xtrain)
  Ytrain_brightness = seq_brightness(images=Ytrain)
  #Xtrain_contrast = seq_contrast(images=Xtrain)
  #Ytrain_contrast = seq_contrast(images=Ytrain)

  
  #Xtrain = np.concatenate((Xtrain, Xtrain_fliplr, Xtrain_rotate_90, Xtrain_rotate_180, Xtrain_rotate_270, Xtrain_flipud, Xtrain_brightness), axis=0)
  #Ytrain = np.concatenate((Ytrain, Ytrain_fliplr, Ytrain_rotate_90, Ytrain_rotate_180, Ytrain_rotate_270, Ytrain_flipud, Ytrain_brightness), axis=0)

  Xtrain = np.concatenate((Xtrain, Xtrain_rotate_90, Xtrain_rotate_180, Xtrain_rotate_270, Xtrain_flipud, Xtrain_fliplr, Xtrain_brightness), axis=0)
  Ytrain = np.concatenate((Ytrain, Ytrain_rotate_90, Ytrain_rotate_180, Ytrain_rotate_270, Ytrain_flipud, Ytrain_fliplr, Ytrain_brightness), axis=0)
  
  Xtrain = np.float32(Xtrain)
  Ytrain = np.float32(Ytrain)

  print("There are %i number of augmented training patches" % (Xtrain.shape[0]))
  return Xtrain, Ytrain